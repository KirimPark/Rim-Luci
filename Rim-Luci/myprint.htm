<%
	require "luci.fs"
	require "luci.tools.status"
	require "uci"
	local nixio = require "nixio"

	local sys  = require "luci.sys"
	local http = require "luci.http"
	local disp = require "luci.dispatcher"
	

	local hostname = sys.hostname()

	local request = disp.context.path
	local request2 = disp.context.request

	local category = request[1]
	local cattree = category and disp.node(category)

	local leaf = request2[#request2]

	local tree = disp.node()
	local node = disp.context.dispatched

	local categories = disp.node_childs(tree)

	local c = tree
	local i , r

	local has_wifi = luci.fs.stat("/etc/config/wireless")
	local has_dhcp = luci.fs.access("/etc/config/dhcp")

	has_wifi = has_wifi and has_wifi.size >0

	local _, _, memtotal, memcached, membuffers, memfree, _, swaptotal,swapcached,swapfree = luci.sys.sysinfo()
	local has_swap
	if swaptotal > 0 then
		has_swap = 1
	end
	local has_dsl = luci.fs.stat("/etc/init.d/dsl_control")

	if luci.http.formvalue("status") == "1" then
		local ntm = require "luci.model.network".init()
		local wan = ntm:get_wannet()
		local wan6 = ntm:get_wan6net()
	
		local rv = {
			uptime	   = luci.sys.uptime(),
			localtime  = os.date(),
			loadavg    = { luci.sys.loadavg() },
			memtotal   = memtotal,
			memcached  = memcached,
			membuffers = membuffers,
			memfree    = memfree,
			swaptotal  = swaptotal,
			swapcached = swapcached,
			swapfree   = swapfree,
			connmax    = conn_max,
			concount   = conn_count,
			leases	   = luci.tools.status.dhcp_leases(),
			leases6    = luci.tools.status.dhcp6_leases(),
			wifinets   = luci.tools.status.wifi_networks()
			}
		if wan then
			rv.wan = {
				ipaddr  = wan:ipaddr(),
				gwaddr  = wan:gwaddr(),
				netmask = wan:netmask(),
				dns	= wan:dnsaddrs(),
				expires = wan:expires(),
				uptime  = wan:uptime(),
				proto   = wan:proto(),
				ifname  = wan:ifname(),
				link	= wan:adminlink()
			}
		end
		
		if wan6 then
			rv.wan6 = {
				ip6addr	= wan6:ip6addr(),
				gw6addr	= wan6:gw6addr(),
				dns	= wan6:dns6addrs(),
				uptime	= wan6:uptime(),
				ifname	= wna6:ifname(),
				link	= wan6:adminlink()
			}
		end

		
		if has_dsl then
			local dsl_stat = luci.sys.exec("/etc/init.d/dsl_control lucistat")
			local dsl_func = loadstring(dsl_stat)
			rv.dsl = dsl_func()
		end
		
		luci.http.prepare_content("application/json")
		luci.http.write_json(rv)
		
		return

	end

	local system, model = luci.sys.sysinfo()

	-- tag all nodes leading to this page

	for i, r in ipairs(request) do
		if c.nodes and c.nodes[r] then
			c = c.nodes[r]
			c._menu_selected = true
		end
	end

%>
<%+header%>
<script type="text/javascript" src="<%=resource%>/cbi.js"></script>
<script type="text/css">
</script>
<script type="text/javascript">//<![CDATA[

	var wifidevs = <%=luci.http.write_json(netdevs) %>;
	var arptable = <%=luci.http.write_json(arpcache)%>;

	function progressbar(v , m)
	{
		var vn = parseInt(v) || 0;
		var mn = parseInt(m) || 100;
		var pc = Math.floor((100 / mn) * vn);
		console.log(v);
		console.log(m);
		console.log(pc);
		return String.format(
			'<div style="width:200px; position:relative; border:1px solid #999999 ">' +
				'<div style="background-color:#CCCCCC; width:%d%%; height:15px">' +
					'<div style="position:absolute; left:0;top:0; text-align:center; width:100%%; color:#000000">' +
						'<small>%s / %s (%d%)</small>' +
					'</div>' +
				'</div>' +
			'</div>', pc, v, m, pc
		);
	
	}
	
	XHR.poll(1, '<%=REQUEST_URI%>',{status : 1},
		function(x, info)
		{
			var si = document.getElementById('wan4_i');
			var ss = document.getElementById('wan4_s');
			var e;
			
			if(e = document.getElementById('system_uptime'))
				e.innerHTML = String.format('%t',info.uptime);
			
			if(e = document.getElementById('memtotal'))
				e.innerHTML = progressbar((info.memfree + info.membuffers + info.memcached) + " <%:kB%>",
						info.memtotal + "<%:kB%>")
			var dev = info.wifinets[0];
			var net = dev.networks[0];

			if(e = document.getElementById('wifi_ssid'))
				e.innerHTML = String.format('%s',net.ssid);

			if(e = document.getElementById('wifi_encrypt'))
 				e.innerHTML = String.format('%s',net.encryption);

			if(e = document.getElementById('wifi_MAC'))
				e.innerHTML = String.format('%s',net.bssid);

			if(e = document.getElementById('wifi_frequency'))
				e.innerHTML = String.format('%s Mbit/s',net.frequency);
						
			var s ;
			var assoclist = [];
			for( var nidx = 0 ; nidx < dev.networks.length; nidx++ )
			{
				var net = dev.networks[nidx];
				var is_assoc = (net.bssid !='00:00:00:00:00:00' && net.channel);
				
				var icon;
				if(!is_assoc)
					icon = "<%=resource%>/icons/signal-none.png";
				else if(net.quality == 0)
					icon = "<%=resource%>/icons/signal-0.png";
				else if(net.quality < 25)
					icon = "<%=resource%>/icons/signal-0-25.png";
				else if(net.quality < 50)
					icon = "<=%resource%>/icons/signal-25-50.png";
				else if(net.quality < 75)
					icon = "<=%resource%>/icons/signal-50-75.png";
				else
					icon = "<=%resource%>/icons/signal-75-100.png";

			

				for( var bssid in net.assoclist)
				{
					assoclist.push({
						bssid:	bssid,
						signal:	net.assoclist[bssid].signal,
						noise:	net.assoclist[bssid].noise,
						rx_rate:net.assoclist[bssid].rx_rate,
						rx_mcs: net.assoclist[bssid].rx_mcs,
						rx_40mhz:net.assoclist[bssid].rx_40mhz,
						tx_rate:net.assoclist[bssid].tx_rate,
						tx_mcs:	net.assoclist[bssid].tx_mcs,
						tx_40mhz:net.assoclist[bssid].tx_40mhz,
						link:	net.link,
						name: 	net.name
					});
				}
			}
			var ac = document.getElementById('wifi_assoc_table');
			if(ac)
			{
				while(ac.rows.length > 1)
					ac.rows[0].parentNode.deleteRow(1);

				assoclist.sort(function(a, b) {
					return (a.name == b.name)
						? (a.bssid < b.bssid)
						: (a.name  > b.name )
					;
				});
			}
			for( var i = 0 ; i < assoclist.length; i ++ )
			{
				var tr = ac.rows[0].parentNode.insertRow(-1);
					tr.className = 'cbi-section-table-row cbi-rowstyle-' + (1 + (i % 2));	
				console.log(assoclist);

				var icon;
				var q = ( -1 * assoclist[i].noise - assoclist[i].signal) / 5;
				if(q < 1)
					icon = "<%=resource%>/icons/signal-0.png";
				else if(q < 2)
					icon = "<%=resource%>/icons/signal-0-25.png";
				else if(q < 3)
					icon = "<%=resource%>/icons/signal-25-50.png";
				else if(q < 4)
					icon = "<%=resource%>/icons/signal-50-75.png";
				else
					icon = "<%=resource%>/icons/signal-75-100.png";
				console.log(icon);
				tr.insertCell(-1).innerHTML = String.format('<img src="%s" title="<%:Signal%>: %d <%:dBm%> / <%:Noise%>: %d <%:dBm%>" />',
					icon,assoclist[i].signal, assoclist[i].noise
				);
				tr.insertCell(-1).innerHTML = assoclist[i].bssid;
				tr.insertCell(-1).innerHTML = String.format(
						'<a href="%s">%s</a>',
							assoclist[i].link,
							'%h'.format(assoclist[i].name).nobr()
				);
				
				tr.insertCell(-1).innerHTML = String.format('%d <%:dBm%>', assoclist[i].signal).nobr();
				tr.insertCell(-1).innerHTML = String.format('%d <%:dBm%>', assoclist[i].noise).nobr();

				tr.insertCell(-1).innerHTML = (assoclist[i].rx_mcs > -1 )
					? String.format('%.1f <%:Mbit/s%>, MCS %d, %d<%:MHz%>', assoclist[i].rx_rate / 1000, assoclist[i].rx_mcs, assoclist[i].rx_40mhz ? 40 : 20).nobr()
					: String.format('%.1f <%:Mbit/s%>', assoclist[i].rx_rate / 1000).nobr()
				;

				tr.insertCell(-1).innerHTML = (assoclist[i].tx_mcs > - 1)
					? String.format('%.1f <%:Mbit/s%>, MCS %d, %d<%:MHz%>', assoclist[i].tx_rate / 1000, assoclist[i].tx_mcs, assoclist[i].tx_40mhz ? 40 : 20).nobr()
					: String.format('5.1f <%:Mbit/s%>', assoclist[i].tx_rate / 1000).nobr()
				;

				if(ac.rows.length == 1)
				{
					var tr = ac.rows[0].parentNode.insertRow(-1);
						tr.className = 'cbi-section-table-row';
					
					var td = tr.insertCell(-1);
						td.colSpan = 7;
						td.innerHTML = '<br/><em><%:No information available%></em>';
				}
			}
			e = document.getElementById('wifi_Count');
			e.innerHTML =assoclist.length ;
		}
	);

//]]>
</script>


<%-
	local childs = disp.node_childs(cattree)
	local s_childs = cattree.nodes[childs[1]]
	local a = disp.node_childs(s_childs)
	local Network_Menu = cattree.nodes[childs[3]]
	local Network_tab = disp.node_childs(Network_Menu)
	local System_Menu = cattree.nodes[childs[2]]
	local System_tab = disp.node_childs(System_Menu)

	local function build_url( tab , slide )
		local prefix = controller .."/" .. category .."/" .. tab
		if slide then
			return pcdata(prefix .."/" .. slide)
		else
			return pcdata(prefix)
		end
	end
	
%>

<%
	for i , r in ipairs (childs) do
		if i<4 then
%>
		<!--<a href="<%=build_url(r)%>"><%=r%></a>-->
<%	
		end
	end
%>

<%

	local x = uci.cursor()
	local uci = luci.model.uci.cursor()
	uci:load("module")
	line = x:get("module","iptable","ipList")
	local value= {}
	local static i = 0 ;
	value.datatype = "ipaddr"
%>
<%
	if line then
		for ip in string.gmatch(line, "[^%s]+")do
		
		value[i] = ip;
		i = i+1
		%><%
		end
	end
%>


<div id=system_inforamtion" style="background-image:url('<%=resource%>/icons/router_bgi.png');
		background-size:100% 100%; margin-top:10px;">
<%
	local ntm = require "luci.model.network".init()
	local wan = ntm:get_wannet()
	local wan6= ntm:get_wan6net()
%>

<h2>&nbsp;&nbsp;<%=luci.sys.hostname()%></h2>
<table style="width:100%"><thead style="border:0px;">
<tr><th style="width:35%">모델 명 </th> <td style="border:0px"> <%=pcdata(model or "?") %></td></tr>
<tr><th>가동 시간 </th><td style="border:0px"> <span id="system_uptime">-</span></td></tr>
<tr><th>ipv4 adress</th><td style="border:0px"> <%=wan:ipaddr()%></td></tr>
<tr><th>gateway	</th><td style="border:0px"> <%=wan:gwaddr()%></td></tr>
<%
	if wan6 then
%>
	<tr><th>ipv6 adress</th><td style="border:0px"> <%=wan6:ipaddr()%></td></tr>
	<tr><th>gate way</th><td style="border:0px"> <%=wan6:gwaddr()%></td></tr>
<%
	end
%>
<tr><th>메모리 ( 사용중 / 전체 )</th><td style="border:0px"><div id="memtotal">-</div></td></tr></thead></table>
</div>
<a href =" <%=build_url(childs[3],Network_tab[2])%>">
<div style="color:#000000;background-image:url('<%=resource%>/icons/wifi_bgi.png');
	background-size:100%100%" id="wifi_information">
<%
	local wa = require("luci.tools.webadmin")
	local ntm = require "luci.model.network".init()
	local wan = ntm:get_wannet()
	local deviceinfo = luci.sys.net.deviceinfo()
	local wireless_send , wireless_receive
	for k , v in pairs(deviceinfo) do
		if k =="wlan0" then
			wireless_send = v[9]
			wireless_receive = v[1]
		end
	end
%>
<h2>&nbsp;&nbsp;WIFI</h2>
<table id="wifi_table" style="border-collapse:collapse;border:0px; width:100%"><thead style="border:0px">
<tr><th style="width:35%">SSID</th><td style="border:0px"> <span id="wifi_ssid"></span></td></tr>
<tr><th>BSSID</th><td style="border:0px"><span id="wifi_MAC"></span></td><td
	style ="border:0px;width:14.2%;height:100%;
"rowspan="2"><p id="wifi_Count" style="font-size:600%;color:#1E90FF;">-</p></td></tr>
<tr><th>전송 속도</th><td style="border:0px"> <span id="wifi_frequency"></span></td></tr>
<tr><th>암호화 방식 </th><td style="border:0px"> <span id="wifi_encrypt"></span></td></tr>
<tr><th>데이터 ( 보냄 / 받음 ) </th><td style="border:0px"><%=wa.byte_format(tonumber(wireless_receive))%> / <%=wa.byte_format(tonumber(wireless_send))%></td></tr>
</thead></table>
</div>
</a>
<h2>Associated Stations</h2>
<table class = "cbi-section-table" id="wifi_assoc_table">
	<tr class = "cbi-section-table-titles">
		<th class="cbi-section-table-cell">&#160;</th>
		<th class="cbi-section-table-cell">MAC 주소</th>
		<th class="cbi-section-table-cell">네트워크</th>
		<th class="cbi-section-table-cell">신 호</th>
		<th class="cbi-section-table-cell">Noise</th>
		<th class="cbi-section-table-cell">수신 속도</th>
		<th calss="cbi-section-table-cell">송신 속도</th>
	</tr>
	<tr class="cbi-section-table-row">
		<td colspan="7"><em><br /><%:Collectiong data...%></em></td>
	</tr>
</table>

<%+footer%>
